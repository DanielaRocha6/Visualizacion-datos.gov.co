{"version":3,"sources":["navio.js","App.js","serviceWorker.js","index.js"],"names":["Navio","props","refDiv","React","createRef","this","loadNavio","nv","navio","current","data","addAllAttribs","updateCallback","selected","console","log","length","ref","Component","App","url","c","state","dataNavio","history","handleSubmit","bind","handleClick","obtenerHistory","deleteHistory","e","target","value","Promise","res","rej","a","fetch","req","json","termino","method","credentials","then","list","i","String","push","setState","event","preventDefault","includes","alert","JSON","stringify","headers","body","temp","ReactDOM","render","document","getElementById","doReq","className","align","onSubmit","placeholder","type","onChange","change","id","map","item","onClick","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.66ef86ce.chunk.js","sourcesContent":["import React from 'react';\nimport navio from 'navio';\nimport PropTypes from 'prop-types';\n\nexport default class Navio extends React.Component{ \n    constructor(props) {\n        super(props);\n        this.refDiv = React.createRef();\n      }\n\n      componentDidUpdate() {\n          this.loadNavio();\n      }\n\n      loadNavio(){\n        const nv = navio(this.refDiv.current);\n        nv.data(this.props.data);\n        nv.addAllAttribs();\n\n        nv.updateCallback( selected => console.log(\"selected in Navio: \", selected.length));\n      }\n   \n      render(){\n        console.log(this.props.data);\n        \n          return(\n            <div ref={this.refDiv}></div>\n          );\n      }\n}\nNavio.propTypes = {\n    data : PropTypes.array\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport Navio from './navio';\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.url = '';\n    this.c = 0;\n    this.state = {\n      dataNavio: [],\n      history: []\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.obtenerHistory = this.obtenerHistory.bind(this);\n    this.deleteHistory = this.deleteHistory.bind(this);\n  }\n\n  change(e) {\n    this.url = e.target.value;\n  }\n\n  doReq(c) {\n    return new Promise((res, rej) => {\n      (async () => {\n        try {\n          const req = await fetch(`${this.url}?$limit=1000&$offset=${1000 * this.c}`);\n          const data = await req.json();\n\n          if (data.length !== 0) {\n            res({ termino: false, data });\n          }\n          else {\n            res({ termino: true, data: [] });\n          }\n        } catch (error) {\n          rej(error);\n        }\n      })();\n    });\n\n  }\n\n  deleteHistory() {\n    fetch('/historico', {\n      method: 'DELETE',\n      credentials: 'same-origin',\n    }).then(data => {\n      console.log(data)\n      data.json()\n    }\n      )\n      .then((data) => { console.log(`Se borró :) ${data}`,`https://www.datos.gov.co/resource/jhpq-24h2.json`)\n      });\n      this.obtenerHistory();\n  }\n\n  obtenerHistory() {\n    let list = [];\n    // eslint-disable-next-line\n    // this.state.history.length=0;\n    fetch('/historico', {\n      method: 'GET',\n      credentials: 'same-origin',\n    }).then(data => data.json())\n      .then((data) => {\n        for (let i = 0; i < data.length; i++) {\n          const a = String(data[i].url);\n          console.log(data[i].url);\n          list.push(a);\n        this.setState({history: list});\n          // eslint-disable-next-line\n          // this.setState(state => {\n          //   list = state.history.push(a);\n          //   return list;  \n          // });\n        }\n      });\n      console.log(this.state.history);\n      \n  }\n\n  handleClick(event, a) {\n    this.url = a;\n    this.handleSubmit(event);\n  }\n\n  handleSubmit(event) {\n    (async () => {\n      let termino = false;\n      event.preventDefault();\n      if (this.url.includes(\".co\") || this.url.includes(\".com\")) {\n        alert(`Pronto traéremos tus datos de ${this.url}`);\n        const a = JSON.stringify({\n          \"url\": this.url\n        });\n        console.log(\"buenasssss\", a);\n        fetch('/historico/url', {\n          method: 'POST',\n          credentials: 'same-origin',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify({\n            \"url\": this.url\n          })\n        });\n        let temp = [];\n        while (!termino) {\n          ReactDOM.render(<h2> Se han cargado {this.c} páginas del dataset solicitado</h2>, document.getElementById(\"cargando\"));\n          const req = await this.doReq(this.c);\n          termino = req.termino;\n          // console.log(this.c, req.data);\n          temp = [...temp, ...req.data];\n          this.c++;\n        }\n        if (termino) {\n          this.obtenerHistory();\n          ReactDOM.render(<h2> Se han cargado {temp.length} entradas</h2>, document.getElementById(\"cargando\"));\n          this.c = 0;\n        }\n        this.setState({ dataNavio: temp });\n      }\n      else alert(\"No es una dirección valida\");\n    })();\n  }\n\n  render() {\n    return (\n      <div className=\"centerDiv\">\n        <div>\n          <h1 align=\"center\">Visualización datos de datos.gov.co</h1>\n          <form className=\"form-group\" onSubmit={this.handleSubmit} >\n            <input placeholder=\"Ingresa una url\"\n              type=\"text\"\n              onChange={this.change.bind(this)} />\n            <br />\n            <input id=\"submit\"type=\"submit\" value=\"CONSULTAR\" />\n          </form >\n          <div id=\"cargando\"></div>\n        </div>\n        <div>\n          {this.state.history.map(item => (\n            <button onClick={(e) => this.handleClick(e, `${item}`)}>{item}<br /></button>\n          ))}\n          {/* <button onClick={this.deleteHistory} id=\"eliminar\">Restablecer histórico</button> */}\n        </div>\n        <div id=\"navio\">\n          {this.state.dataNavio && <Navio data={this.state.dataNavio} />}\n        </div>\n      </div>\n    );\n  }\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}